on:
  workflow_call:
    inputs:
      bu:
        required: true
        type: string
        description: 'business unit name'
      environment:
        required: true
        type: string
      service_name:
        required: true
        type: string
        description: 'service name, also will be used as ecr repo name'
      config_path:
        required: false
        type: string
        default: 'iac/service.config.yml'
      with_db_migration:
        required: false
        type: boolean
        default: false
      with_seeder:
        required: false
        type: string
        default: 'false'
      lang:
        required: false
        type: string
        description: 'Programming language that used by service'
      db_migration_path:
        description:  "The path to migration folder."
        required: false
        type: string
        default: "database/migrations"
      db_seeder_path:
        description: "The path to seeder folder"
        required: false
        default: "database/seeder"
        type: string
      node_version:
        description: "The version of node."
        required: false
        type: string
        default: '12'
      go_version:
        description: "Golang version"
        required: false
        type: string
        default: '^1.17.5'
      db_name_key:
        description: "db name"
        required: false
        type: string
      db_host_key:
        description: "db_host_key"
        required: false
        type: string
      db_user_key:
        description: "db_user_key"
        required: false
        type: string
      db_password_key:
        description: "db_password_key"
        required: false
        type: string
      consumer:
        description: "set true if you need to deploy a consumer service"
        required: false
        type: boolean
        default: false
      ecr_name:
        description: "overide service_name as ecr_name"
        required: false
        type: string
      with_ca_crt:
        description: "provide option to insert ca.crt file from github secrets"
        required: false
        type: boolean
        default: false
      dockerfile:
        required: false
        type: string
        description: 'docker file'
      ssm_folder:
        required: false
        type: string
        description: 'ssm folder'
      katalon_api_key:
        required: false
        description: ''
        type: string
        default: KATALON_API_KEY
      test_suite_collection_path:
        required: false
        description: ''
        type: string
        default: "Test Suites/QoalaPlus_RegressionTest"
      execution_profile:
        required: false
        description: ''
        type: string
        default: "DEV_ACTION"
      browser_type:
        required: false
        description: ''
        type: string
        default: "Chrome (headless)"
      java_distribution:
        description: "Java distribution to run Katalon"
        required: false
        default: zulu
        type: string
      java_version:
        description: "Java version to run Katalon"
        required: false
        default: '8'
        type: string
      katalon_secret_ssm_key:
        description: "Katalon JSON secret SSM Key."
        required: false
        default: JSON_SECRET
        type: string
      katalon_version:
        description: "Katalon Version"
        required: false
        default: '8.3.0'
        type: string
      with_regression_test:
        description: ''
        required: false
        default: false
        type: boolean
      allowed_branches:
        description: 'allowed_branches'
        required: false
        default: ''
        type: string
      repo_name:
        description: 'Repository Name'
        required: false
        default: ''
        type: string
      branch_name:
        description: 'Branch Name'
        required: false
        default: ''
        type: string
      static_s3_website:
        description: 'If true will use static website build job'
        required: false
        default: false
        type: boolean
      use_yarn:
        description: 'If true will use yarn to build'
        required: false
        default: false
        type: boolean
      lifetime:
        description: "Extend environment lifetime value set in hours. The value you set will be added to the initial 4h(ex. value set to 5h, 5+4=9h)"
        type: string
        required: false
      
    secrets:
      token_github:
        required: true
      ca_crt:
        required: false
      DEVOPS_SLACK_BOT_TOKEN:
        required: false
      FONTAWESOME_NPM_AUTH_TOKEN:
        required: false

name: Deployment Pipeline
jobs:
  notification:
    runs-on: [ self-hosted, eks-runner ]
    name: Notify to Slack
    outputs:
      ts: ${{ steps.slack.outputs.ts }}
    steps:
    - name: Send notifications to Slack
      id: slack
      uses: slackapi/slack-github-action@v1.24.0
      env:
        SLACK_BOT_TOKEN: ${{ secrets.DEVOPS_SLACK_BOT_TOKEN }}
      with:
        channel-id: 'C05HQDA9L8G' # ID of Slack Channel you want to post to
        payload: |
          {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Factory: New deployment for ${{ inputs.repo_name }}*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Application:* ${{ inputs.repo_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:* ${{ inputs.environment }}"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployment Status: In progress:hourglass_flowing_sand:"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Github Workflow:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
                    }
                  ]
                }
              ]
          }


  provision-static-website:
    name: Provision Static Website Resources
    runs-on: [self-hosted, eks-runner]
    if: inputs.static_s3_website == true
    outputs:
      bucketName: ${{ steps.provision.outputs.bucketName }}
      cloudfrontID: ${{ steps.provision.outputs.distId }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/disposable-static-website-action
          token: ${{ secrets.token_github }}
          ref: main
          path: .github/actions/disposable-static-website-action

      - name: Provision Resources
        uses: ./.github/actions/disposable-static-website-action
        id: provision
        with:
          bu: ${{ inputs.bu }}
          env: ${{ inputs.environment }}
          assumeRole: "arn:aws:iam::744994327583:role/staging-factory-role"
          service_name: ${{ inputs.repo_name }}

  build-frontend:
    name: Build Frontend
    runs-on: [self-hosted, eks-runner-fe]
    needs: provision-static-website
    if: inputs.static_s3_website == true
    env:
      FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.token_github }}
    steps:
      - name: Checkout
        if: inputs.repo_name == ''
        uses: actions/checkout@v2

      - name: Disposable Env Checkout 
        if: inputs.repo_name != ''
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/${{ inputs.repo_name }}
          token: ${{ secrets.token_github }}
          fetch-depth: 0
          ref: ${{ inputs.branch_name }}

      - name: Modify config file
        if: inputs.repo_name != ''
        run: |
          CONFIG_FILE="config/development.json"
          if [ -f "$CONFIG_FILE" ]; then
                QPLUS_DEV_HOST="https://api-${{ inputs.environment }}.lab.qoalaplus.com"
                QAPP_DEV_HOST="https://api-${{ inputs.environment }}.lab.qoala.app"
                
                if [ `jq 'has("apiBaseUrlQPlus")' config/development.json` == true ]; then
                  jq --arg key "apiBaseUrlQPlus" --arg value "$QPLUS_DEV_HOST" \
                  '.[$key]=$value' "config/development.json" > temp.json

                  jq --arg key "apiBaseUrl" --arg value "$QAPP_DEV_HOST" \
                  '.[$key]=$value' "config/development.json" > temp.json && mv temp.json config/development.json

                  echo "Updated $CONFIG_FILE"
                  cat $CONFIG_FILE
                else
                  jq --arg key "apiBaseUrl" --arg value "$DEV_HOST" \
                  '.[$key]=$value' "config/development.json" > temp.json && mv temp.json config/development.json
                  echo "Updated $CONFIG_FILE"
                  cat $CONFIG_FILE
                fi
                '.[$key]=$value' "config/development.json" > temp.json && mv temp.json config/development.json
                echo "Updated $CONFIG_FILE"
                cat $CONFIG_FILE
          else
            echo "No files updated"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-southeast-1
          role-to-assume: arn:aws:iam::744994327583:role/eks-qoala-dev-cluster-ci-role
          role-duration-seconds: 3600
      - name: Set node version
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
        env:
          GITHUB_TOKEN: ${{ secrets.token_github }}

      - name: Setup yarn
        if: inputs.use_yarn == true
        run: npm install -g yarn
      - name: Set node version for yarn
        if: inputs.use_yarn == true
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'yarn'
        env:
          GITHUB_TOKEN: ${{ secrets.token_github }}

      - name: Checkout S3 Action V2 Repo
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/s3-deploy-action
          ref: 'v2'
          token: ${{ secrets.token_github }} # stored in GitHub secrets
          path: .github/actions/s3-deploy-action-v2

      - name: Install dependencies
        if: inputs.use_yarn == false
        run: |
          npm install
          npm ci
      - name: Project build
        if: inputs.use_yarn == false
        run: npm run build:staging

      - name: Yarn install and build
        if: inputs.use_yarn == true
        run: |
          yarn install
          yarn run build:staging
        env:
          GITHUB_TOKEN: ${{ secrets.token_github }}

      - name: Deploy to S3
        id: website-deployment
        uses: ./.github/actions/s3-deploy-action-v2
        with:
          region: ap-southeast-1
          source: ./dist
          bucket: ${{ needs.provision-static-website.outputs.bucketName }}
          cloudfront-dist-id: ${{ needs.provision-static-website.outputs.cloudfrontID }}
          modifiers: |
            [
              {
                "pattern": "*.+(js|css|png|svg|eot|ttf|woff|woff2)",
                "cache_control": "public, max-age=31536000, must-revalidate"
              }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.token_github }}
          NODE_OPTIONS: '--max_old_space_size=8192'

      - name: Update status frontend
        if: ${{ steps.website-deployment.conclusion }} == 'success'
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.DEVOPS_SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C05HQDA9L8G' # ID of Slack Channel you want to post to
          update-ts: ${{ needs.notification.outputs.ts }}
          payload: |
            {
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Staging Factory: New Environment for ${{ inputs.repo_name }}*"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Application:* ${{ inputs.repo_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Environment:* ${{ inputs.environment }}"
                      }
                    ]
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "Deployment Status: Success :white_check_mark:"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Host URL:* https://${{ needs.provision-static-website.outputs.bucketName }}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Github Workflow:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
                      }
                    ]
                  }
                ]
            }

  config: 
    name: Generate Config 
    needs: [ notification ]
    runs-on: [ self-hosted, eks-runner ]
    if: inputs.static_s3_website == false
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      eks_cluster: ${{ steps.config.outputs.eks_cluster }}
      namespace: ${{ steps.config.outputs.namespace }}
      build_role_arn: ${{ steps.config.outputs.build_role_arn }}
      deploy_role_arn: ${{ steps.config.outputs.deploy_role_arn }}
      aws_region: ${{ steps.config.outputs.aws_region }}
      ssm_role_arn: ${{ steps.config.outputs.ssm_role_arn }}
      ssm_path: ${{ steps.config.outputs.ssm_path }}
      node_env: ${{ steps.config.outputs.node_env }}
    steps:
      - name: Checkout Generate Config Action Repo
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/generate-config-action
          token: ${{ secrets.token_github }}
          path: .github/actions/generate-config-action
          ref: staging-factory-feature
      
      - name: Generate Config
        uses: ./.github/actions/generate-config-action
        id: config
        with:
          bu: ${{ inputs.bu }}
          environment: ${{ inputs.environment }}
          service_name: ${{ inputs.service_name }}
          ssm_folder: ${{ inputs.ssm_folder }}
          allowed_branches: ${{ inputs.allowed_branches }}

  db_migration:
    name: DB Migration
    needs: config
    runs-on: [ self-hosted, eks-runner ]
    if: inputs.static_s3_website == false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Checkout Goose Migration Action Repo
        if: inputs.with_db_migration == true && inputs.lang == 'golang'
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/goose-migration-action
          token: ${{ secrets.token_github }}
          path: .github/actions/goose-migration-action
          ref: improve/action

      - uses: ./.github/actions/goose-migration-action
        if: inputs.with_db_migration == true && inputs.lang == 'golang'
        with:
          role_to_assume: ${{ needs.config.outputs.ssm_role_arn}}
          parameter_path: ${{ needs.config.outputs.ssm_path }}
          db_name_key: ${{ inputs.db_name_key }}
          db_host_key: ${{ inputs.db_host_key }}
          db_user_key: ${{ inputs.db_user_key }}
          db_password_key: ${{ inputs.db_password_key }}
          db_migration_path: ${{ inputs.db_migration_path }}
          with_seeder: ${{ inputs.with_seeder }}
          db_seeder_path: ${{ inputs.db_seeder_path }}
          go_version: ${{ inputs.go_version }}
      
      - name: Checkout Knex Migration Action Repo
        if: inputs.with_db_migration == true && inputs.lang == 'nodejs'
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/knex-migration-action
          token: ${{ secrets.token_github }}
          path: .github/actions/knex-migration-action
          ref: improve/action

      - uses: ./.github/actions/knex-migration-action
        if: inputs.with_db_migration == true && inputs.lang == 'nodejs'
        env:
          NODE_ENV: ${{ needs.config.outputs.node_env }}
        with:
          role_to_assume: ${{ needs.config.outputs.ssm_role_arn}}
          parameter_path: ${{ needs.config.outputs.ssm_path }}
          db_name_key: ${{ inputs.db_name_key }}
          db_host_key: ${{ inputs.db_host_key }}
          db_user_key: ${{ inputs.db_user_key }}
          db_password_key: ${{ inputs.db_password_key }}
          with_seeder: ${{ inputs.with_seeder }}
          node_version: ${{ inputs.node_version }}

  build:
    name: Build Image
    needs: [ config, db_migration ]
    runs-on: [ self-hosted, eks-runner ]
    if: inputs.static_s3_website == false
    outputs:
      image_registry: ${{ steps.publish_image.outputs.image_registry }}
      image_tag: ${{ (inputs.consumer == true && format('{0}-{1}', 'consumer', github.sha)) || github.sha}}
    steps:
      - name: Checkout
        if: inputs.repo_name == ''
        uses: actions/checkout@v2

      - name: Disposable Env Checkout 
        if: inputs.repo_name != ''
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/${{ inputs.repo_name }}
          token: ${{ secrets.token_github }}
          ref: ${{ inputs.branch_name }}

      - name: Modify config file
        if: inputs.repo_name != ''
        run: |
          GO_FILE_PATH=$(find . -name app.config.dev.yml -type f)
          NODE_FILE_PATH=$(find . -name app.config.js -type f)
          PYTHON_FILE_PATH=$(find . -name environment.py -type f)
          if [ -f "$GO_FILE_PATH" ]; then
                lab_file=$(find . -name app.config.lab.yml -type f)
                cp $lab_file $GO_FILE_PATH
                echo "Updated $GO_FILE_PATH"
                cat $GO_FILE_PATH
          elif [ -f "$NODE_FILE_PATH" ]; then
                lab_file=$(find . -name app.config.lab.js -type f)
                cp $lab_file $NODE_FILE_PATH
                echo "Updated $NODE_FILE_PATH"
                cat $NODE_FILE_PATH
          elif [ -f "$PYTHON_FILE_PATH" ]; then
                lab_file=$(find . -name environment.lab.py -type f)
                cp $lab_file $PYTHON_FILE_PATH
                echo "Updated $PYTHON_FILE_PATH"
                cat $PYTHON_FILE_PATH
          else
            echo "No files updated"
          fi

      - name: Checkout ECR Publish GitHub Action Repo
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/ecr-publish-action
          token: ${{ secrets.token_github }}
          path: .github/actions/ecr-publish-action
      
      - name: Inject CA CERT File
        if: inputs.with_ca_crt == true
        shell: bash
        run: |
          echo "${{ secrets.ca_crt }}" > ca.crt

      - name: Build and Push Image
        uses: ./.github/actions/ecr-publish-action
        id: publish_image
        with:
          aws-region: "ap-southeast-3"
          # ${{ needs.config.outputs.aws_region }}
          ecr_name: ${{ inputs.ecr_name || inputs.service_name}}
          role-to-assume: ${{ needs.config.outputs.build_role_arn }}
          dockerfile: ${{ (inputs.dockerfile != '' && inputs.dockerfile) || 'Dockerfile' }}
          ecr_cache_tag: ${{ (inputs.consumer == true && format('{0}-{1}', 'consumer-latest', needs.config.outputs.environment)) || format('{0}-{1}', 'latest', needs.config.outputs.environment) }}
          build_args: |
            GITHUB_TOKEN=${{ secrets.token_github }}
            CONSUMER=${{ inputs.consumer }}
          custom_tags: |
            ${{ (inputs.consumer == true && format('{0}-{1}', 'consumer-latest', needs.config.outputs.environment)) || format('{0}-{1}', 'latest', needs.config.outputs.environment)}}
            ${{ (inputs.consumer == true && format('{0}-{1}', 'consumer', github.sha)) || github.sha}}

  deploy:
    name: Deploy Service
    needs: [ config, build, notification ]
    runs-on: [self-hosted, eks-runner]
    if: inputs.static_s3_website == false
    steps:
      - name: Checkout
        if: inputs.repo_name == ''
        uses: actions/checkout@v2

      - name: Disposable Env Checkout 
        if: inputs.repo_name != ''
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/${{ inputs.repo_name }}
          token: ${{ secrets.token_github }}
          ref: ${{ inputs.branch_name }}

      - name: Checkout SSM Injection
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/helm-values-ssm-injection
          token: ${{ secrets.token_github }}
          path: .github/actions/helm-values-ssm-injection
          ref: staging-factory-feature
      
      - name: SSM Injection
        id: values
        uses: ./.github/actions/helm-values-ssm-injection
        with:
          image: ${{ needs.build.outputs.image_registry }}/${{ inputs.ecr_name || inputs.service_name }}:${{ needs.build.outputs.image_tag }}
          environment: ${{ (inputs.consumer == true && format('{0}-{1}', needs.config.outputs.environment, 'consumer')) || needs.config.outputs.environment}}
          configPath: ${{ inputs.config_path }}
          serviceName: ${{ inputs.service_name }}
          bu: ${{ inputs.bu }}
          assumeRole: ${{ (inputs.bu == 'qplus' && 'arn:aws:iam::631836213257:role/qoalaplus-devops-ci-role') || 'arn:aws:iam::733346176650:role/devops-ci-role'}}
          consumer: ${{ inputs.consumer }}

      - name: Checkout GitHub Action Repo
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/setup-eks-helm-action
          token: ${{ secrets.token_github }}
          path: .github/actions/setup-eks-helm-action
          ref: staging-factory-feature

      - uses: ./.github/actions/setup-eks-helm-action
        with:
          aws-region: ${{ needs.config.outputs.aws_region }}
          role-to-assume: ${{ needs.config.outputs.deploy_role_arn }}
          github-token: ${{ secrets.token_github }}
          cluster-name: ${{ needs.config.outputs.eks_cluster }}
 
      - name: Deploy service
        id: helm
        shell: bash
        run: |
          env_name=$(echo ${{ needs.config.outputs.namespace }} | sed 's/-[^-]*$//')
          helm upgrade --install --atomic --wait --namespace $env_name --create-namespace ${{ (inputs.consumer == true && format('{0}-{1}', inputs.service_name, 'consumer')) || inputs.service_name }} .charts/charts/service -f ${{ steps.values.outputs.values }}
          if grep -A3 'stagingFactory:' ${{ steps.values.outputs.values }} | tail -n1 | cut -c 12- | grep -q "true"; then
            kubectl annotate --overwrite namespace $env_name staging-factory=true
          fi

      - name: Extend env lifetime
        shell: bash
        if: ${{ inputs.lifetime }} != ''
        run: |
          env_name=$(echo ${{ needs.config.outputs.namespace }} | sed 's/-[^-]*$//')
          kubectl annotate --overwrite namespace $env_name staging-facroty/extend=${{ inputs.lifetime }}

      - name: Update status
        if: ${{ steps.helm.conclusion }} == 'success'
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.DEVOPS_SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C05HQDA9L8G' # ID of Slack Channel you want to post to
          update-ts: ${{ needs.notification.outputs.ts }}
          payload: |
            {
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Staging Factory: New Environment for ${{ inputs.repo_name }}*"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Application:* ${{ inputs.repo_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Environment:* ${{ inputs.environment }}"
                      }
                    ]
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "Deployment Status: Success :white_check_mark:"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*API Host:* https://${{ steps.values.outputs.host }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Grafana Logs:* <https://grafana.uat.qoala.app/d/liz0yRCZz/logs-app?orgId=1&var-app=${{ inputs.environment}}%2F${{ (inputs.consumer == true && format('{0}-{1}', inputs.service_name, 'consumer')) || inputs.service_name }}&var-search=|View Logs>"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Github Workflow:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
                      }
                    ]
                  }
                ]
            }

  regression_test:
    name: Regression Test
    runs-on: [self-hosted,eks-runner]
    needs: [ config, deploy ]
    if: inputs.with_regression_test == true
    continue-on-error: true
    steps:
      - name: Checkout GitHub Action Repo
        uses: actions/checkout@v2
        with:
          repository: qoala-engineering/automation-test-action
          token: ${{ secrets.token_github }}
          path: .github/actions/automation-test-action

      - name: QA Automation Test
        uses: ./.github/actions/automation-test-action
        env:
          GIT_HUB_TOKEN: ${{ secrets.token_github }}
        with: 
          role-to-assume: ${{ needs.config.outputs.ssm_role_arn }}
          aws-region: ${{ needs.config.outputs.aws_region }}
          java-distribution: ${{ inputs.java_distribution }}
          java-version: ${{ inputs.java_version }}
          ssm-key: ${{ inputs.katalon_secret_ssm_key }}
          env: ${{ needs.config.outputs.environment }}
          bu: ${{ inputs.bu }}
          katalon-version: ${{ inputs.katalon_version }}
          test-suite-collection-path: ${{ inputs.test_suite_collection_path }}
          browser-type: ${{ inputs.browser_type }}
          api-key: ${{ inputs.katalon_api_key }}
          execution-profile: ${{ inputs.execution_profile }}
